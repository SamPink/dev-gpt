import devgpt.prompts.config as config
from devgpt import GPT4

# Create a GPT4 instance
gpt4 = GPT4(config.OPENAI_API_KEY)

task = """
in a folder called insurance there are 3 files
sample_submission_KvRh9Sx.csv
test_zo1G9sv.csv
train_qWM28Yl.csv

eaxmple of the data:
policy_id,policy_tenure,age_of_car,age_of_policyholder,area_cluster,population_density,make,segment,model,fuel_type,max_torque,max_power,engine_type,airbags,is_esc,is_adjustable_steering,is_tpms,is_parking_sensors,is_parking_camera,rear_brakes_type,displacement,cylinder,transmission_type,gear_box,steering_type,turning_radius,length,width,height,gross_weight,is_front_fog_lights,is_rear_window_wiper,is_rear_window_washer,is_rear_window_defogger,is_brake_assist,is_power_door_locks,is_central_locking,is_power_steering,is_driver_seat_height_adjustable,is_day_night_rear_view_mirror,is_ecw,is_speed_alert,ncap_rating,is_claim
ID00001,0.515873589958172,0.05,0.644230769230769,C1,4990,1,A,M1,CNG,60Nm@3500rpm,40.36bhp@6000rpm,F8D Petrol Engine,2,No,No,No,Yes,No,Drum,796,3,Manual,5,Power,4.6,3445,1515,1475,1185,No,No,No,No,No,No,No,Yes,No,No,No,Yes,0,0
ID00002,0.672618513547733,0.02,0.375,C2,27003,1,A,M1,CNG,60Nm@3500rpm,40.36bhp@6000rpm,F8D Petrol Engine,2,No,No,No,Yes,No,Drum,796,3,Manual,5,Power,4.6,3445,1515,1475,1185,No,No,No,No,No,No,No,Yes,No,No,No,Yes,0,0
ID00003,0.841110255796233,0.02,0.384615384615385,C3,4076,1,A,M1,CNG,60Nm@3500rpm,40.36bhp@6000rpm,F8D Petrol Engine,2,No,No,No,Yes,No,Drum,796,3,Manual,5,Power,4.6,3445,1515,1475,1185,No,No,No,No,No,No,No,Yes,No,No,No,Yes,0,0
ID00004,0.900276558749967,0.11,0.432692307692308,C4,21622,1,C1,M2,Petrol,113Nm@4400rpm,88.50bhp@6000rpm,1.2 L K12N Dualjet,2,Yes,Yes,No,Yes,Yes,Drum,1197,4,Automatic,5,Electric,4.8,3995,1735,1515,1335,Yes,No,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,2,0

this dataset is inalamaned with only a 6 percent positive rate, use f1 to score the model

solve this problem using the train file


CarIns is a startup that provides insurance for cars. It is one of the best car insurance brands known for the highest claim settlement ratio. It was launched back in Oct 2020 and acquired its initial policyholders by providing a hassle-free claim process, instant policy issuance, and claim settlements at minimum coverages.
As it's a fast growing startup, the company would like to optimize the cost of the insurance by identifying the policyholders who are more likely to claim in the next 6 months.
Now the company would like to use Data Science to identify the policyholders whose chances of filing a claim are high in the next 6 months. The company challenges the Data Science community to build a high-performance algorithm to predict if the policyholder will file a claim in the next 6 months or not based on the set of car and policy features.

Features
policy_id: Unique identifier of the policyholder
policy_tenure: Time period of the policy
age_of_car: Normalized age of the car in years
age_of_policyholder: Normalized age of policyholder in years
area_cluster: Area cluster of the policyholder
population density:Population density of the city (Policyholder City)
make: Encoded Manufacturer/company of the car
segment: Segment of the car (A/ B1/ B2/ C1/ C2)
model: Encoded name of the car
fuel_type: Type of fuel used by the car
max_torque: Maximum Torque generated by the car (Nm@rpm)
max_power: Maximum Power generated by the car (bhp@rpm)
engine_type: Type of engine used in the car
airbags: Number of airbags installed in the car
is_esc: Boolean flag indicating whether Electronic Stability Control (ESC) is present in the car or not.
is_adjustable_steering: Boolean flag indicating whether the steering wheel of the car is adjustable or not.
is_tpms: Boolean flag indicating whether Tyre Pressure Monitoring System (TPMS) is present in the car or not.
is_parking_sensors: Boolean flag indicating whether parking sensors are present in the car or not.
is_parking_camera: Boolean flag indicating whether the parking camera is present in the car or not.
rear_brakes_type: Type of brakes used in the rear of the car
displacement: Engine displacement of the car (cc)
cylinder: Number of cylinders present in the engine of the car
transmission_type: Transmission type of the car
gear_box: Number of gears in the car
steering_type: Type of the power steering present in the car
turning_radius: The space a vehicle needs to make a certain turn (Meters)
length: Length of the car (Millimetre)
width: Width of the car (Millimetre)
height: Height of the car (Millimetre)
gross_weight: The maximum allowable weight of the fully-loaded car, including passengers, cargo and equipment (Kg)
is_front_fog_lights: Boolean flag indicating whether front fog lights are available in the car or not.
is_rear_window_wiper: Boolean flag indicating whether the rear window wiper is available in the car or not.
is_rear_window_washer: Boolean flag indicating whether the rear window washer is available in the car or not.
is_rear_window_defogger: Boolean flag indicating whether rear window defogger is available in the car or not.
is_brake_assist: Boolean flag indicating whether the brake assistance feature is available in the car or not.
is_power_door_lock: Boolean flag indicating whether a power door lock is available in the car or not.
is_central_locking: Boolean flag indicating whether the central locking feature is available in the car or not.
is_power_steering: Boolean flag indicating whether power steering is available in the car or not.
is_driver_seat_height_adjustable: Boolean flag indicating whether the height of the driver seat is adjustable or not.
is_day_night_rear_view_mirror: Boolean flag indicating whether day & night rearview mirror is present in the car or not.
is_ecw: Boolean flag indicating whether Engine Check Warning (ECW) is available in the car or not.
is_speed_alert: Boolean flag indicating whether the speed alert system is available in the car or not.
ncap_rating: Safety rating given by NCAP (out of 5)
is_claim: Outcome: Boolean flag indicating whether the policyholder file a claim in the next 6 months or not.
"""
gpt4.start_project(task)

# Prompt the user to add more messages until they enter "quit" or "exit"
while True:
    message_text = input("Enter a new message (or type 'quit' to exit): ")
    if message_text.lower() in ["quit", "exit"]:
        break

    gpt4.update_project(message_text)
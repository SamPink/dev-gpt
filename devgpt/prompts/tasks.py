task_ml = """
in a folder called insurance there are 3 files
sample_submission_KvRh9Sx.csv
test_zo1G9sv.csv
train_qWM28Yl.csv

eaxmple of the data:
policy_id,policy_tenure,age_of_car,age_of_policyholder,area_cluster,population_density,make,segment,model,fuel_type,max_torque,max_power,engine_type,airbags,is_esc,is_adjustable_steering,is_tpms,is_parking_sensors,is_parking_camera,rear_brakes_type,displacement,cylinder,transmission_type,gear_box,steering_type,turning_radius,length,width,height,gross_weight,is_front_fog_lights,is_rear_window_wiper,is_rear_window_washer,is_rear_window_defogger,is_brake_assist,is_power_door_locks,is_central_locking,is_power_steering,is_driver_seat_height_adjustable,is_day_night_rear_view_mirror,is_ecw,is_speed_alert,ncap_rating,is_claim
ID00001,0.515873589958172,0.05,0.644230769230769,C1,4990,1,A,M1,CNG,60Nm@3500rpm,40.36bhp@6000rpm,F8D Petrol Engine,2,No,No,No,Yes,No,Drum,796,3,Manual,5,Power,4.6,3445,1515,1475,1185,No,No,No,No,No,No,No,Yes,No,No,No,Yes,0,0
ID00002,0.672618513547733,0.02,0.375,C2,27003,1,A,M1,CNG,60Nm@3500rpm,40.36bhp@6000rpm,F8D Petrol Engine,2,No,No,No,Yes,No,Drum,796,3,Manual,5,Power,4.6,3445,1515,1475,1185,No,No,No,No,No,No,No,Yes,No,No,No,Yes,0,0
ID00003,0.841110255796233,0.02,0.384615384615385,C3,4076,1,A,M1,CNG,60Nm@3500rpm,40.36bhp@6000rpm,F8D Petrol Engine,2,No,No,No,Yes,No,Drum,796,3,Manual,5,Power,4.6,3445,1515,1475,1185,No,No,No,No,No,No,No,Yes,No,No,No,Yes,0,0
ID00004,0.900276558749967,0.11,0.432692307692308,C4,21622,1,C1,M2,Petrol,113Nm@4400rpm,88.50bhp@6000rpm,1.2 L K12N Dualjet,2,Yes,Yes,No,Yes,Yes,Drum,1197,4,Automatic,5,Electric,4.8,3995,1735,1515,1335,Yes,No,No,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,Yes,2,0

this dataset is inalamaned with only a 6 percent positive rate, use f1 to score the model

solve this problem using the train file


CarIns is a startup that provides insurance for cars. It is one of the best car insurance brands known for the highest claim settlement ratio. It was launched back in Oct 2020 and acquired its initial policyholders by providing a hassle-free claim process, instant policy issuance, and claim settlements at minimum coverages.
As it's a fast growing startup, the company would like to optimize the cost of the insurance by identifying the policyholders who are more likely to claim in the next 6 months.
Now the company would like to use Data Science to identify the policyholders whose chances of filing a claim are high in the next 6 months. The company challenges the Data Science community to build a high-performance algorithm to predict if the policyholder will file a claim in the next 6 months or not based on the set of car and policy features.

Features
policy_id: Unique identifier of the policyholder
policy_tenure: Time period of the policy
age_of_car: Normalized age of the car in years
age_of_policyholder: Normalized age of policyholder in years
area_cluster: Area cluster of the policyholder
population density:Population density of the city (Policyholder City)
make: Encoded Manufacturer/company of the car
segment: Segment of the car (A/ B1/ B2/ C1/ C2)
model: Encoded name of the car
fuel_type: Type of fuel used by the car
max_torque: Maximum Torque generated by the car (Nm@rpm)
max_power: Maximum Power generated by the car (bhp@rpm)
engine_type: Type of engine used in the car
airbags: Number of airbags installed in the car
is_esc: Boolean flag indicating whether Electronic Stability Control (ESC) is present in the car or not.
is_adjustable_steering: Boolean flag indicating whether the steering wheel of the car is adjustable or not.
is_tpms: Boolean flag indicating whether Tyre Pressure Monitoring System (TPMS) is present in the car or not.
is_parking_sensors: Boolean flag indicating whether parking sensors are present in the car or not.
is_parking_camera: Boolean flag indicating whether the parking camera is present in the car or not.
rear_brakes_type: Type of brakes used in the rear of the car
displacement: Engine displacement of the car (cc)
cylinder: Number of cylinders present in the engine of the car
transmission_type: Transmission type of the car
gear_box: Number of gears in the car
steering_type: Type of the power steering present in the car
turning_radius: The space a vehicle needs to make a certain turn (Meters)
length: Length of the car (Millimetre)
width: Width of the car (Millimetre)
height: Height of the car (Millimetre)
gross_weight: The maximum allowable weight of the fully-loaded car, including passengers, cargo and equipment (Kg)
is_front_fog_lights: Boolean flag indicating whether front fog lights are available in the car or not.
is_rear_window_wiper: Boolean flag indicating whether the rear window wiper is available in the car or not.
is_rear_window_washer: Boolean flag indicating whether the rear window washer is available in the car or not.
is_rear_window_defogger: Boolean flag indicating whether rear window defogger is available in the car or not.
is_brake_assist: Boolean flag indicating whether the brake assistance feature is available in the car or not.
is_power_door_lock: Boolean flag indicating whether a power door lock is available in the car or not.
is_central_locking: Boolean flag indicating whether the central locking feature is available in the car or not.
is_power_steering: Boolean flag indicating whether power steering is available in the car or not.
is_driver_seat_height_adjustable: Boolean flag indicating whether the height of the driver seat is adjustable or not.
is_day_night_rear_view_mirror: Boolean flag indicating whether day & night rearview mirror is present in the car or not.
is_ecw: Boolean flag indicating whether Engine Check Warning (ECW) is available in the car or not.
is_speed_alert: Boolean flag indicating whether the speed alert system is available in the car or not.
ncap_rating: Safety rating given by NCAP (out of 5)
is_claim: Outcome: Boolean flag indicating whether the policyholder file a claim in the next 6 months or not.
"""


house_data_task = """
there is a csv file called house-data.csv (it does not currently have any headers) in the data folder. it contains

this dataset of properties sold in the uk last year with 766k rows.

column_names = ['transaction_id', 'price', 'transfer_date', 'postcode', 'property_type', 'new_build', 'leasehold', 'PAON', 'SAON', 'street', 'locality', 'town_city', 'district', 'county', 'PPD_category', 'record_status']
    
write a query to find the top 10 most expensive properties in london
"""

flights_task = """
use a public api to get flights currently flying over the maidenhead.

plot this data on a interactive map.

the map should show the planes moving in real time.
"""

house_price = """
Great idea! Here are some steps to help you create a project that can help you decide where to buy a house in the UK:

Define your criteria: The first step is to define your criteria for selecting a location. This could include factors such as proximity to public transportation, schools, parks, crime rates, access to healthcare, and other amenities that are important to you.

Gather data: Once you have defined your criteria, you can start gathering data about different neighborhoods in the UK. You can use public datasets such as the UK Police Data, the UK government's OpenData portal, and the UK House Price Index. You can also use APIs such as Zoopla or Rightmove to gather data on house prices and other property-related information.

Visualize the data: After you have gathered the data, you can start visualizing it on a map using Mapbox. You can use different data layers to display information such as house prices, crime rates, and proximity to public transportation.

Analyze the data: Once you have visualized the data, you can start analyzing it to find patterns and correlations. For example, you can use clustering algorithms to group neighborhoods with similar characteristics, or you can use regression models to predict house prices based on different factors.

Build a recommendation system: Finally, you can build a recommendation system that takes into account your criteria and the data analysis results to suggest neighborhoods that match your preferences. This recommendation system can be based on machine learning algorithms such as collaborative filtering or content-based filtering.

By following these steps, you can create a powerful tool that helps you make informed decisions when buying a house in the UK.
"""

crime_map = """

mapbox api key "pk.eyJ1Ijoic3BpbmsiLCJhIjoiY2xlN2hxZW00MDBvZjNwc2NyMmNzZXc0cCJ9.V47jC5udtxn8P13fPNeXOA"
Crime heatmap - You can create a crime heatmap using Mapbox and public APIs such as the Crime Data API. This heatmap can display the frequency and intensity of crime incidents in a particular area or city. You can also add features such as filtering by crime type, time period, and demographic information.
"""

system_message= """
Act as a senior python dev and provide code in the following format: 

```bash
(required dependencies)
```

```python
(Python code)
```

the code should be in a single file that can be run from main.
never try to import any local files, or external apis that require a key.
the code should run without any aditional configuration.
follow all of these rules exactly or the code will not run.
"""